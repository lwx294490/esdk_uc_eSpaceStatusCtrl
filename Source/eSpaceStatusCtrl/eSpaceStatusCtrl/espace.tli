// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (e95b2ce7).
//
// C:\Users\F00152~1\AppData\Local\Temp\espace.tli
//
// Wrapper implementations for Win32 type library eSpace.exe
// compiler-generated file created 06/08/15 at 17:27:57 - DO NOT EDIT!

#pragma once

//
// interface IMessenger wrapper method implementations
//

inline IDispatchPtr IMessenger::GetWindow ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessenger::ViewProfile ( const _variant_t & vContact ) {
    HRESULT _hr = raw_ViewProfile(vContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IMessenger::GetReceiveFileDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceiveFileDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IDispatchPtr IMessenger::StartVoice ( const _variant_t & vContact ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_StartVoice(vContact, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IMessenger::InviteApp ( const _variant_t & vContact, _bstr_t bstrAppID ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_InviteApp(vContact, bstrAppID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessenger::SendMail ( const _variant_t & vContact ) {
    HRESULT _hr = raw_SendMail(vContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessenger::OpenInbox ( ) {
    HRESULT _hr = raw_OpenInbox();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IMessenger::SendFile ( const _variant_t & vContact, _bstr_t bstrFileName ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SendFile(vContact, bstrFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessenger::Signout ( ) {
    HRESULT _hr = raw_Signout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessenger::Signin ( long hwndParent, _bstr_t bstrSigninName, _bstr_t bstrPassword ) {
    HRESULT _hr = raw_Signin(hwndParent, bstrSigninName, bstrPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IMessenger::GetContact ( _bstr_t bstrSigninName, _bstr_t bstrServiceId ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetContact(bstrSigninName, bstrServiceId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessenger::OptionsPages ( long hwndParent, MOPTIONPAGE MOPTIONPAGE ) {
    HRESULT _hr = raw_OptionsPages(hwndParent, MOPTIONPAGE);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessenger::AddContact ( long hwndParent, _bstr_t bstrEMail ) {
    HRESULT _hr = raw_AddContact(hwndParent, bstrEMail);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessenger::FindContact ( long hwndParent, _bstr_t bstrFirstName, _bstr_t bstrLastName, const _variant_t & vbstrCity, const _variant_t & vbstrState, const _variant_t & vbstrCountry ) {
    HRESULT _hr = raw_FindContact(hwndParent, bstrFirstName, bstrLastName, vbstrCity, vbstrState, vbstrCountry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IMessenger::InstantMessage ( const _variant_t & vContact ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_InstantMessage(vContact, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IMessenger::Phone ( const _variant_t & vContact, MPHONE_TYPE ePhoneNumber, _bstr_t bstrNumber ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Phone(vContact, ePhoneNumber, bstrNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessenger::MediaWizard ( long hwndParent ) {
    HRESULT _hr = raw_MediaWizard(hwndParent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IMessenger::Page ( const _variant_t & vContact ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Page(vContact, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessenger::AutoSignin ( ) {
    HRESULT _hr = raw_AutoSignin();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IMessenger::GetMyContacts ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_MyContacts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IMessenger::GetMySigninName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MySigninName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessenger::GetMyFriendlyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyFriendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessenger::PutMyStatus ( MISTATUS pmStatus ) {
    HRESULT _hr = put_MyStatus(pmStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline MISTATUS IMessenger::GetMyStatus ( ) {
    MISTATUS _result;
    HRESULT _hr = get_MyStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMessenger::GetUnreadEmailCount ( MUAFOLDER mFolder ) {
    long _result = 0;
    HRESULT _hr = get_UnreadEmailCount(mFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessenger::GetMyServiceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyServiceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessenger::GetMyPhoneNumber ( MPHONE_TYPE PhoneType ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyPhoneNumber(PhoneType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IMessenger::GetMyProperty ( MCONTACTPROPERTY ePropType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MyProperty(ePropType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMessenger::PutMyProperty ( MCONTACTPROPERTY ePropType, const _variant_t & pvPropVal ) {
    HRESULT _hr = put_MyProperty(ePropType, pvPropVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessenger::GetMyServiceId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyServiceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IDispatchPtr IMessenger::GetServices ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Services(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IMessenger2 wrapper method implementations
//

inline MUASORT IMessenger2::GetContactsSortOrder ( ) {
    MUASORT _result;
    HRESULT _hr = get_ContactsSortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessenger2::PutContactsSortOrder ( MUASORT pSort ) {
    HRESULT _hr = put_ContactsSortOrder(pSort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IMessenger2::StartVideo ( const _variant_t & vContact ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_StartVideo(vContact, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IMessenger2::GetMyGroups ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_MyGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IMessenger2::CreateGroup ( _bstr_t bstrName, const _variant_t & vService ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CreateGroup(bstrName, vService, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IMessenger3 wrapper method implementations
//

inline _variant_t IMessenger3::GetProperty ( MMESSENGERPROPERTY ePropType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Property(ePropType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMessenger3::PutProperty ( MMESSENGERPROPERTY ePropType, const _variant_t & pvPropVal ) {
    HRESULT _hr = put_Property(ePropType, pvPropVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMessengerAdvanced wrapper method implementations
//

inline _variant_t IMessengerAdvanced::StartConversation ( CONVERSATION_TYPE ConversationType, const _variant_t & vParticipants, const _variant_t & vContextualData, const _variant_t & vSubject, const _variant_t & vConversationIndex, const _variant_t & vConversationData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_StartConversation(ConversationType, vParticipants, vContextualData, vSubject, vConversationIndex, vConversationData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IMessengerAdvanced::GetAuthenticationInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAuthenticationInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IMessengerContactResolution wrapper method implementations
//

inline _bstr_t IMessengerContactResolution::ResolveContact ( ADDRESS_TYPE AddressType, CONTACT_RESOLUTION_TYPE ResolutionType, _bstr_t bstrAddress ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ResolveContact(AddressType, ResolutionType, bstrAddress, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// dispinterface DMessengerEvents wrapper method implementations
//

inline HRESULT DMessengerEvents::OnGroupAdded ( long hr, IDispatch * pMGroup ) {
    return _com_dispatch_method(this, 0x415, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", hr, pMGroup);
}

inline HRESULT DMessengerEvents::OnGroupRemoved ( long hr, IDispatch * pMGroup ) {
    return _com_dispatch_method(this, 0x416, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", hr, pMGroup);
}

inline HRESULT DMessengerEvents::OnGroupNameChanged ( long hr, IDispatch * pMGroup ) {
    return _com_dispatch_method(this, 0x417, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", hr, pMGroup);
}

inline HRESULT DMessengerEvents::OnContactAddedToGroup ( long hr, IDispatch * pMGroup, IDispatch * pMContact ) {
    return _com_dispatch_method(this, 0x418, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0009", hr, pMGroup, pMContact);
}

inline HRESULT DMessengerEvents::OnContactRemovedFromGroup ( long hr, IDispatch * pMGroup, IDispatch * pMContact ) {
    return _com_dispatch_method(this, 0x419, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0009", hr, pMGroup, pMContact);
}

inline HRESULT DMessengerEvents::OnIMWindowCreated ( IDispatch * pIMWindow ) {
    return _com_dispatch_method(this, 0x411, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pIMWindow);
}

inline HRESULT DMessengerEvents::OnIMWindowDestroyed ( IDispatch * pIMWindow ) {
    return _com_dispatch_method(this, 0x412, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pIMWindow);
}

inline HRESULT DMessengerEvents::OnIMWindowContactAdded ( IDispatch * pContact, IDispatch * pIMWindow ) {
    return _com_dispatch_method(this, 0x413, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", pContact, pIMWindow);
}

inline HRESULT DMessengerEvents::OnIMWindowContactRemoved ( IDispatch * pContact, IDispatch * pIMWindow ) {
    return _com_dispatch_method(this, 0x414, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", pContact, pIMWindow);
}

inline HRESULT DMessengerEvents::OnAppShutdown ( ) {
    return _com_dispatch_method(this, 0x408, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DMessengerEvents::OnSignin ( long hr ) {
    return _com_dispatch_method(this, 0x400, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", hr);
}

inline HRESULT DMessengerEvents::OnSignout ( ) {
    return _com_dispatch_method(this, 0x401, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DMessengerEvents::OnContactListAdd ( long hr, IDispatch * pMContact ) {
    return _com_dispatch_method(this, 0x402, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", hr, pMContact);
}

inline HRESULT DMessengerEvents::OnContactListRemove ( long hr, IDispatch * pMContact ) {
    return _com_dispatch_method(this, 0x403, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", hr, pMContact);
}

inline HRESULT DMessengerEvents::OnMyFriendlyNameChange ( long hr, _bstr_t bstrPrevFriendlyName ) {
    return _com_dispatch_method(this, 0x405, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008", hr, (BSTR)bstrPrevFriendlyName);
}

inline HRESULT DMessengerEvents::OnMyStatusChange ( long hr, MISTATUS mMyStatus ) {
    return _com_dispatch_method(this, 0x407, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", hr, mMyStatus);
}

inline HRESULT DMessengerEvents::OnMyPhoneChange ( MPHONE_TYPE PhoneType, _bstr_t bstrNumber ) {
    return _com_dispatch_method(this, 0x40e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008", PhoneType, (BSTR)bstrNumber);
}

inline HRESULT DMessengerEvents::OnMyPropertyChange ( long hr, MCONTACTPROPERTY ePropType, const _variant_t & vPropVal ) {
    return _com_dispatch_method(this, 0x409, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x000c", hr, ePropType, &vPropVal);
}

inline HRESULT DMessengerEvents::OnContactFriendlyNameChange ( long hr, IDispatch * pMContact, _bstr_t bstrPrevFriendlyName ) {
    return _com_dispatch_method(this, 0x404, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0008", hr, pMContact, (BSTR)bstrPrevFriendlyName);
}

inline HRESULT DMessengerEvents::OnContactStatusChange ( IDispatch * pMContact, MISTATUS mStatus ) {
    return _com_dispatch_method(this, 0x406, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", pMContact, mStatus);
}

inline HRESULT DMessengerEvents::OnContactPropertyChange ( long hr, IDispatch * pContact, MCONTACTPROPERTY ePropType, const _variant_t & vPropVal ) {
    return _com_dispatch_method(this, 0x40a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0003\x000c", hr, pContact, ePropType, &vPropVal);
}

inline HRESULT DMessengerEvents::OnContactBlockChange ( long hr, IDispatch * pContact, VARIANT_BOOL pBoolBlock ) {
    return _com_dispatch_method(this, 0x40b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x000b", hr, pContact, pBoolBlock);
}

inline HRESULT DMessengerEvents::OnContactPagerChange ( long hr, IDispatch * pContact, VARIANT_BOOL pBoolPage ) {
    return _com_dispatch_method(this, 0x40c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x000b", hr, pContact, pBoolPage);
}

inline HRESULT DMessengerEvents::OnContactPhoneChange ( long hr, IDispatch * pContact, MPHONE_TYPE PhoneType, _bstr_t bstrNumber ) {
    return _com_dispatch_method(this, 0x40d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0003\x0008", hr, pContact, PhoneType, (BSTR)bstrNumber);
}

inline HRESULT DMessengerEvents::OnUnreadEmailChange ( MUAFOLDER mFolder, long cUnreadEmail, VARIANT_BOOL * pBoolfEnableDefault ) {
    return _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", mFolder, cUnreadEmail, pBoolfEnableDefault);
}

inline HRESULT DMessengerEvents::OnContactResolved ( long hr, ADDRESS_TYPE AddressType, _bstr_t bstrAddress, _bstr_t bstrIMAddress ) {
    return _com_dispatch_method(this, 0x41a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0008\x0008", hr, AddressType, (BSTR)bstrAddress, (BSTR)bstrIMAddress);
}

//
// interface IMessengerWindow wrapper method implementations
//

inline HRESULT IMessengerWindow::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMessengerWindow::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMessengerWindow::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessengerWindow::PutLeft ( long plLeft ) {
    HRESULT _hr = put_Left(plLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessengerWindow::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessengerWindow::PutTop ( long plTop ) {
    HRESULT _hr = put_Top(plTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessengerWindow::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessengerWindow::PutWidth ( long plWidth ) {
    HRESULT _hr = put_Width(plWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessengerWindow::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessengerWindow::PutHeight ( long plHeight ) {
    HRESULT _hr = put_Height(plHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMessengerWindow::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMessengerWindow::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IMessengerWindow::GetProperty ( MWINDOWPROPERTY ePropType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Property(ePropType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMessengerWindow::PutProperty ( MWINDOWPROPERTY ePropType, const _variant_t & pvPropVal ) {
    HRESULT _hr = put_Property(ePropType, pvPropVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMessengerConversationWnd wrapper method implementations
//

inline IDispatchPtr IMessengerConversationWnd::GetContacts ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Contacts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IMessengerConversationWnd::GetHistory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_History(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IMessengerConversationWnd::AddContact ( const _variant_t & vContact ) {
    HRESULT _hr = raw_AddContact(vContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMessengerConversationWndAdvanced wrapper method implementations
//

inline HRESULT IMessengerConversationWndAdvanced::SendText ( _bstr_t bstrTextMessage ) {
    HRESULT _hr = raw_SendText(bstrTextMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMessengerContact wrapper method implementations
//

inline _bstr_t IMessengerContact::GetFriendlyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FriendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline MISTATUS IMessengerContact::GetStatus ( ) {
    MISTATUS _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessengerContact::GetSigninName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SigninName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessengerContact::GetServiceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ServiceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IMessengerContact::GetBlocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Blocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessengerContact::PutBlocked ( VARIANT_BOOL pBoolBlock ) {
    HRESULT _hr = put_Blocked(pBoolBlock);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMessengerContact::GetCanPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessengerContact::GetPhoneNumber ( MPHONE_TYPE PhoneType ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneNumber(PhoneType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IMessengerContact::GetIsSelf ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSelf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IMessengerContact::GetProperty ( MCONTACTPROPERTY ePropType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Property(ePropType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMessengerContact::PutProperty ( MCONTACTPROPERTY ePropType, const _variant_t & pvPropVal ) {
    HRESULT _hr = put_Property(ePropType, pvPropVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessengerContact::GetServiceId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ServiceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IMessengerContactAdvanced wrapper method implementations
//

inline VARIANT_BOOL IMessengerContactAdvanced::GetIsTagged ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTagged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessengerContactAdvanced::PutIsTagged ( VARIANT_BOOL pBoolIsTagged ) {
    HRESULT _hr = put_IsTagged(pBoolIsTagged);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IMessengerContactAdvanced::GetPresenceProperties ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PresenceProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMessengerContactAdvanced::PutPresenceProperties ( const _variant_t & pvPresenceProperties ) {
    HRESULT _hr = put_PresenceProperties(pvPresenceProperties);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMessengerContacts wrapper method implementations
//

inline long IMessengerContacts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMessengerContacts::Item ( long Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessengerContacts::Remove ( IDispatch * pMContact ) {
    HRESULT _hr = raw_Remove(pMContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IMessengerContacts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMessengerService wrapper method implementations
//

inline _bstr_t IMessengerService::GetServiceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ServiceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessengerService::GetServiceId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ServiceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessengerService::GetMyFriendlyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyFriendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline MISTATUS IMessengerService::GetMyStatus ( ) {
    MISTATUS _result;
    HRESULT _hr = get_MyStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessengerService::GetMySigninName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MySigninName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IMessengerService::GetProperty ( MSERVICEPROPERTY ePropType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Property(ePropType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMessengerService::PutProperty ( MSERVICEPROPERTY ePropType, const _variant_t & pvPropVal ) {
    HRESULT _hr = put_Property(ePropType, pvPropVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMessengerServices wrapper method implementations
//

inline IDispatchPtr IMessengerServices::GetPrimaryService ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_PrimaryService(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IMessengerServices::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMessengerServices::Item ( long Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IMessengerServices::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMessengerGroup wrapper method implementations
//

inline IDispatchPtr IMessengerGroup::GetContacts ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Contacts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IMessengerGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessengerGroup::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IMessengerGroup::AddContact ( const _variant_t & vContact ) {
    HRESULT _hr = raw_AddContact(vContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerGroup::RemoveContact ( const _variant_t & vContact ) {
    HRESULT _hr = raw_RemoveContact(vContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IMessengerGroup::GetService ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Service(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IMessengerGroups wrapper method implementations
//

inline HRESULT IMessengerGroups::Remove ( IDispatch * pGroup ) {
    HRESULT _hr = raw_Remove(pGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMessengerGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMessengerGroups::Item ( long Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IMessengerGroups::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMessengerEventHandler wrapper method implementations
//

inline HRESULT IMessengerEventHandler::NotifyContactStatusChange ( IDispatch * pDispContact, MISTATUS MISTATUS ) {
    HRESULT _hr = raw_NotifyContactStatusChange(pDispContact, MISTATUS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerEventHandler::NotifyAppShutdown ( ) {
    HRESULT _hr = raw_NotifyAppShutdown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerEventHandler::NotifySignOut ( ) {
    HRESULT _hr = raw_NotifySignOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerEventHandler::NotifySignIn ( ) {
    HRESULT _hr = raw_NotifySignIn();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerEventHandler::NotifyContactListAdd ( long hResult, IDispatch * pDispContact ) {
    HRESULT _hr = raw_NotifyContactListAdd(hResult, pDispContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerEventHandler::NotifyContactListRemove ( long hResult, IDispatch * pDispContact ) {
    HRESULT _hr = raw_NotifyContactListRemove(hResult, pDispContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerEventHandler::NotifyContactResolved ( long hResult, ADDRESS_TYPE AddressType, _bstr_t bstrAddress, _bstr_t bstrIMAddress ) {
    HRESULT _hr = raw_NotifyContactResolved(hResult, AddressType, bstrAddress, bstrIMAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IECSContactInfo wrapper method implementations
//

inline _bstr_t IECSContactInfo::GetFriendlyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFriendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetHomePhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetHomePhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetOfficePhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetOfficePhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetOtherPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetOtherPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetCorpName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCorpName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetDeptName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDeptName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetEmail ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetMobile ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetMobile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IECSContactInfo::GetStatus ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IECSContactInfo::SetFriendlyName ( _bstr_t FriendlyName ) {
    HRESULT _hr = raw_SetFriendlyName(FriendlyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetID ( _bstr_t ID ) {
    HRESULT _hr = raw_SetID(ID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetName ( _bstr_t Name ) {
    HRESULT _hr = raw_SetName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetHomePhone ( _bstr_t homePhone ) {
    HRESULT _hr = raw_SetHomePhone(homePhone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetOfficePhone ( _bstr_t officePhone ) {
    HRESULT _hr = raw_SetOfficePhone(officePhone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetOtherPhone ( _bstr_t otherPhone ) {
    HRESULT _hr = raw_SetOtherPhone(otherPhone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetCorpName ( _bstr_t corpName ) {
    HRESULT _hr = raw_SetCorpName(corpName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetDeptName ( _bstr_t deptName ) {
    HRESULT _hr = raw_SetDeptName(deptName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetEmail ( _bstr_t email ) {
    HRESULT _hr = raw_SetEmail(email);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetMobile ( _bstr_t mobile ) {
    HRESULT _hr = raw_SetMobile(mobile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetStatus ( long Status ) {
    HRESULT _hr = raw_SetStatus(Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IECSContactInfo::GetUcAccount ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetUcAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetUcUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetUcUri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IECSContactInfo::SetUcAccount ( _bstr_t ucAccount ) {
    HRESULT _hr = raw_SetUcAccount(ucAccount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetUcUri ( _bstr_t ucUri ) {
    HRESULT _hr = raw_SetUcUri(ucUri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IECSContactInfo::GetSex ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IECSContactInfo::SetSex ( _bstr_t sex ) {
    HRESULT _hr = raw_SetSex(sex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IECSContactInfo::GetStaffNo ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetStaffNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IECSContactInfo::SetStaffNo ( _bstr_t staffNo ) {
    HRESULT _hr = raw_SetStaffNo(staffNo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IECSContactInfo::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IECSContactInfo::SetAddress ( _bstr_t address ) {
    HRESULT _hr = raw_SetAddress(address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IECSContactInfo::GetImageID ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetImageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IECSContactInfo::SetImageID ( _bstr_t imageID ) {
    HRESULT _hr = raw_SetImageID(imageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::GetLocation ( BSTR * location ) {
    HRESULT _hr = raw_GetLocation(location);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetLocation ( _bstr_t location ) {
    HRESULT _hr = raw_SetLocation(location);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IECSContactInfo::GetLoginDevice ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLoginDevice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IECSContactInfo::SetLoginDevice ( _bstr_t strLoginInfo ) {
    HRESULT _hr = raw_SetLoginDevice(strLoginInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetIPPhone1 ( _bstr_t ipphone1 ) {
    HRESULT _hr = raw_SetIPPhone1(ipphone1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IECSContactInfo::GetIPPhone1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetIPPhone1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IECSContactMgr wrapper method implementations
//

inline IECSContactInfoPtr IECSContactMgr::GetContactInfo ( _bstr_t account ) {
    struct IECSContactInfo * _result = 0;
    HRESULT _hr = raw_GetContactInfo(account, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IECSContactInfoPtr(_result, false);
}

inline HRESULT IECSContactMgr::GetContactInfoByCondition ( _bstr_t cond, SAFEARRAY * * ppContactInfo ) {
    HRESULT _hr = raw_GetContactInfoByCondition(cond, ppContactInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactMgr::SubscribeContactStatus ( _bstr_t account, long subType ) {
    HRESULT _hr = raw_SubscribeContactStatus(account, subType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactMgr::AddnonUCContacts ( ) {
    HRESULT _hr = raw_AddnonUCContacts();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactMgr::AddToContactList ( _bstr_t account ) {
    HRESULT _hr = raw_AddToContactList(account);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IECSContactMgr::GetContactDevice ( _bstr_t account ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetContactDevice(account, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IECSContactMgr::IsFriend ( _bstr_t account ) {
    long _result = 0;
    HRESULT _hr = raw_IsFriend(account, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IECSMainWindow wrapper method implementations
//

inline HRESULT IECSMainWindow::MakeCall ( _bstr_t bstrUri, _bstr_t bstrPhoneNo ) {
    HRESULT _hr = raw_MakeCall(bstrUri, bstrPhoneNo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::ShowDialPad ( long Screen_X, long Screen_Y ) {
    HRESULT _hr = raw_ShowDialPad(Screen_X, Screen_Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::ShowCreateIMMeeting ( ) {
    HRESULT _hr = raw_ShowCreateIMMeeting();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::ShowCreateMMMeeting ( ) {
    HRESULT _hr = raw_ShowCreateMMMeeting();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::ShowIMChat ( _bstr_t receiver ) {
    HRESULT _hr = raw_ShowIMChat(receiver);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::ShowMeetingMgr ( ) {
    HRESULT _hr = raw_ShowMeetingMgr();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::MakeVideoCall ( _bstr_t bstrUri, _bstr_t bstrPhoneNo ) {
    HRESULT _hr = raw_MakeVideoCall(bstrUri, bstrPhoneNo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::ShowSMSChat ( SAFEARRAY * receiver ) {
    HRESULT _hr = raw_ShowSMSChat(receiver);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IECSMainWindow::GetSmsPERM ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetSmsPERM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IECSMainWindow::ShowSMSGroupChat ( _bstr_t Groupno ) {
    HRESULT _hr = raw_ShowSMSGroupChat(Groupno);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::HideMainWindow ( ) {
    HRESULT _hr = raw_HideMainWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::ShowMainWindow ( ) {
    HRESULT _hr = raw_ShowMainWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::JoinConf ( _bstr_t bstrAccessCode, _bstr_t bstrPasscode ) {
    HRESULT _hr = raw_JoinConf(bstrAccessCode, bstrPasscode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::StartTempGroupConvsation ( long lConvType, SAFEARRAY * arrayUCAccOrName, SAFEARRAY * arrayPhoneNum ) {
    HRESULT _hr = raw_StartTempGroupConvsation(lConvType, arrayUCAccOrName, arrayPhoneNum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::Exec ( long type, long param1, _bstr_t param2, _bstr_t param3, _bstr_t param4 ) {
    HRESULT _hr = raw_Exec(type, param1, param2, param3, param4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IECSEventCallback wrapper method implementations
//

inline HRESULT IECSEventCallback::OnEventReceived ( enum ECSEventType eventId, VARIANT * param1, VARIANT * param2, VARIANT * param3 ) {
    HRESULT _hr = raw_OnEventReceived(eventId, param1, param2, param3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IUCOfficeIntegration wrapper method implementations
//

inline OIFeature IUCOfficeIntegration::GetSupportedFeatures ( _bstr_t version ) {
    OIFeature _result;
    HRESULT _hr = raw_GetSupportedFeatures(version, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IUCOfficeIntegration::GetAuthenticationInfo ( _bstr_t version ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAuthenticationInfo(version, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IDispatchPtr IUCOfficeIntegration::GetInterface ( _bstr_t version, OIInterface Interface ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetInterface(version, Interface, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IAsynchronousOperation wrapper method implementations
//

inline _variant_t IAsynchronousOperation::GetAsyncState ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AsyncState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IAsynchronousOperation::GetStatusCode ( ) {
    long _result = 0;
    HRESULT _hr = get_StatusCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IAsynchronousOperation::GetIsCompleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCompleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IAsynchronousOperation::GetIsSucceeded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSucceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IAsynchronousOperation::GetIsCancellable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCancellable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IAsynchronousOperation::GetDiagnosticCode ( ) {
    long _result = 0;
    HRESULT _hr = get_DiagnosticCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IAsynchronousOperation::CancelOperation ( ) {
    HRESULT _hr = raw_CancelOperation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IContactInformationDictionary wrapper method implementations
//

inline SAFEARRAY * IContactInformationDictionary::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IContactInformationDictionary::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IContactInformationDictionary::GetItem ( ContactInformationType _key ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(_key, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline SAFEARRAY * IContactInformationDictionary::GetKeys ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Keys(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IContactInformationDictionary::TryGetValue ( ContactInformationType _key, VARIANT * _value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TryGetValue(_key, _value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ContactInformationType IContactInformationDictionary::GetKeyAt ( long _index ) {
    ContactInformationType _result;
    HRESULT _hr = raw_GetKeyAt(_index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IContactInformationDictionary::GetValueAt ( long _index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetValueAt(_index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IContactInformationDictionary::ContainsKey ( ContactInformationType _key ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ContainsKey(_key, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IContactSettingDictionary wrapper method implementations
//

inline SAFEARRAY * IContactSettingDictionary::GetKeys ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Keys(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IContactSettingDictionary::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IContactSettingDictionary::TryGetValue ( ContactSetting _key, VARIANT * _value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TryGetValue(_key, _value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IContactSettingDictionary::GetItem ( ContactSetting _key ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(_key, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline ContactSetting IContactSettingDictionary::GetKeyAt ( long _index ) {
    ContactSetting _result;
    HRESULT _hr = raw_GetKeyAt(_index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IContactSettingDictionary::GetValueAt ( long _index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetValueAt(_index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IContactSettingDictionary::ContainsKey ( ContactSetting _key ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ContainsKey(_key, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IContactSettingDictionary::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IContactEndpoint wrapper method implementations
//

inline ContactEndpointType IContactEndpoint::Gettype ( ) {
    ContactEndpointType _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IContactEndpoint::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IContactEndpoint::GetUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Uri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IContactEndpoint::CanStart ( ModalityTypes _modalityTypes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanStart(_modalityTypes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISignInConfiguration wrapper method implementations
//

inline VARIANT_BOOL ISignInConfiguration::CanSet ( SignInConfigurationType _configurationType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanSet(_configurationType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LyncClientConfigurationMode ISignInConfiguration::GetMode ( ) {
    LyncClientConfigurationMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISignInConfiguration::PutMode ( LyncClientConfigurationMode _value ) {
    HRESULT _hr = put_Mode(_value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TransportMode ISignInConfiguration::GetTransportMode ( ) {
    TransportMode _result;
    HRESULT _hr = get_TransportMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISignInConfiguration::PutTransportMode ( TransportMode _value ) {
    HRESULT _hr = put_TransportMode(_value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISignInConfiguration::GetInternalServerUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InternalServerUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISignInConfiguration::PutInternalServerUrl ( _bstr_t _server ) {
    HRESULT _hr = put_InternalServerUrl(_server);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISignInConfiguration::GetExternalServerUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExternalServerUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISignInConfiguration::PutExternalServerUrl ( _bstr_t _server ) {
    HRESULT _hr = put_ExternalServerUrl(_server);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISignInConfiguration::GetUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ISignInConfiguration::GetIsPasswordSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPasswordSaved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISignInConfiguration::PutIsPasswordSaved ( VARIANT_BOOL _savePassword ) {
    HRESULT _hr = put_IsPasswordSaved(_savePassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISignInConfiguration::GetSignInAutoRetry ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SignInAutoRetry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISignInConfiguration::PutSignInAutoRetry ( VARIANT_BOOL _autoRetry ) {
    HRESULT _hr = put_SignInAutoRetry(_autoRetry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline UCContactAvailability ISignInConfiguration::GetSignInAsAvailability ( ) {
    UCContactAvailability _result;
    HRESULT _hr = get_SignInAsAvailability(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISignInConfiguration::PutSignInAsAvailability ( UCContactAvailability _availability ) {
    HRESULT _hr = put_SignInAsAvailability(_availability);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISignInConfiguration::GetSignedInFromIntranet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SignedInFromIntranet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISignInConfiguration::PutDisplayName ( _bstr_t _arg1 ) {
    HRESULT _hr = put_DisplayName(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface _IUCOfficeIntegrationEvents wrapper method implementations
//

inline HRESULT _IUCOfficeIntegrationEvents::OnShuttingDown ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x32, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface _IInstantMessagingClientEvents wrapper method implementations
//

inline HRESULT _IInstantMessagingClientEvents::OnStateChanged ( struct IInstantMessagingClient * eventSource, struct IClientStateChangedEventData * * eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x64, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x4009", eventSource, eventData);
    return _result;
}

//
// interface IClientStateChangedEventData wrapper method implementations
//

inline ClientState IClientStateChangedEventData::GetNewState ( ) {
    ClientState _result;
    HRESULT _hr = get_NewState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface _IContactManagerEvents wrapper method implementations
//

inline HRESULT _IContactManagerEvents::OnGroupAdded ( struct IContactManager * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xc8, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IContactManagerEvents::OnGroupRemoved ( struct IContactManager * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xc9, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IContactManagerEvents::OnSearchProviderStateChanged ( struct IContactManager * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xca, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

//
// dispinterface _IContactsAndGroupsCallback wrapper method implementations
//

inline HRESULT _IContactsAndGroupsCallback::OnAddCustomGroup ( struct IContactManager * _source, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfc, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _source, _asyncOperation);
    return _result;
}

inline HRESULT _IContactsAndGroupsCallback::OnAddDistributionGroup ( struct IContactManager * _source, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfd, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _source, _asyncOperation);
    return _result;
}

inline HRESULT _IContactsAndGroupsCallback::OnRemoveContactFromAllGroups ( struct IContactManager * _source, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xff, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _source, _asyncOperation);
    return _result;
}

inline HRESULT _IContactsAndGroupsCallback::OnRemoveGroup ( struct IContactManager * _source, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfe, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _source, _asyncOperation);
    return _result;
}

inline HRESULT _IContactsAndGroupsCallback::OnSearch ( struct IContactManager * _source, struct ISearchResults * _searchResults, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009\x0009", _source, _searchResults, _asyncOperation);
    return _result;
}

inline HRESULT _IContactsAndGroupsCallback::OnLookup ( struct IContactManager * _source, IDispatch * _lookupResult, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfb, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009\x0009", _source, _lookupResult, _asyncOperation);
    return _result;
}

//
// interface ISearchResults wrapper method implementations
//

inline VARIANT_BOOL ISearchResults::GetIsMoreAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMoreAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * ISearchResults::GetAllContactsAndGroups ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AllContactsAndGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * ISearchResults::GetContacts ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Contacts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * ISearchResults::GetGroups ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Groups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * ISearchResults::GetAllResults ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AllResults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISearchResult wrapper method implementations
//

inline IDispatchPtr ISearchResult::GetResult ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Result(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t ISearchResult::GetHitHighlightSummary ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HitHighlightSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// dispinterface _IContactEvents wrapper method implementations
//

inline HRESULT _IContactEvents::OnContactInformationChanged ( struct IContact * _eventSource, struct IContactInformationChangedEventData * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IContactEvents::OnSettingChanged ( struct IContact * _eventSource, struct IContactSettingChangedEventData * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x191, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IContactEvents::OnUriChanged ( struct IContact * _eventSource, struct IUriChangedEventData * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x192, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _eventSource, _eventData);
    return _result;
}

//
// interface IContactInformationChangedEventData wrapper method implementations
//

inline SAFEARRAY * IContactInformationChangedEventData::GetChangedContactInformation ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ChangedContactInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IContactSettingChangedEventData wrapper method implementations
//

inline ContactSetting IContactSettingChangedEventData::GetSetting ( ) {
    ContactSetting _result;
    HRESULT _hr = get_Setting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IContactSettingChangedEventData::Getvalue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IUriChangedEventData wrapper method implementations
//

inline _bstr_t IUriChangedEventData::GetNewUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NewUri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IUriChangedEventData::GetOldUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OldUri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// dispinterface _IUCSelfEvents wrapper method implementations
//

inline HRESULT _IUCSelfEvents::OnPhonesChanged ( struct ISelf * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x6a4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IUCSelfEvents::OnResiliencyModeChanged ( struct ISelf * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x6a5, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

//
// interface ILocaleString wrapper method implementations
//

inline long ILocaleString::GetLocaleId ( ) {
    long _result = 0;
    HRESULT _hr = get_LocaleId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ILocaleString::Getvalue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// dispinterface _IConversationEvents wrapper method implementations
//

inline HRESULT _IConversationEvents::OnStateChanged ( struct IConversation * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3e8, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationEvents::OnPropertyChanged ( struct IConversation * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3e9, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationEvents::OnParticipantAdded ( struct IConversation * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3eb, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationEvents::OnParticipantRemoved ( struct IConversation * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3ec, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationEvents::OnActionAvailabilityChanged ( struct IConversation * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3ea, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationEvents::OnConversationContextAdded ( struct IConversation * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3ed, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationEvents::OnConversationContextRemoved ( struct IConversation * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3ee, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationEvents::OnConversationContextLinkClicked ( struct IConversation * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3f1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationEvents::OnInitialContextReceived ( struct IConversation * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3ef, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationEvents::OnInitialContextSent ( struct IConversation * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3f2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationEvents::OnContextDataReceived ( struct IConversation * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3f0, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationEvents::OnContextDataSent ( struct IConversation * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3f3, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

//
// dispinterface _IConversationManagerEvents wrapper method implementations
//

inline HRESULT _IConversationManagerEvents::OnConversationAdded ( struct IConversationManager * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x384, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationManagerEvents::OnConversationRemoved ( struct IConversationManager * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationManagerEvents::OnSummarizerStatesChanged ( struct IConversationManager * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

//
// interface IParticipantInfo wrapper method implementations
//

inline _bstr_t IParticipantInfo::GetUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Uri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IParticipantInfo::GetIsRepresenting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRepresenting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IParticipantInfo::GetRepresentedUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RepresentedUri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IParticipantInfo::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IParticipantInfo::PutDisplayName ( _bstr_t _name ) {
    HRESULT _hr = put_DisplayName(_name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IParticipantInfo::GetRepresentedDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RepresentedDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IParticipantInfo::PutRepresentedDisplayName ( _bstr_t _name ) {
    HRESULT _hr = put_RepresentedDisplayName(_name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface _IAutomationCallback wrapper method implementations
//

inline HRESULT _IAutomationCallback::OnStartConversation ( struct IAutomation * _source, struct IConversationWindow * _uiWindow, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1004, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009\x0009", _source, _uiWindow, _asyncOperation);
    return _result;
}

inline HRESULT _IAutomationCallback::OnJoinConference ( struct IAutomation * _source, struct IConversationWindow * _uiWindow, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1005, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009\x0009", _source, _uiWindow, _asyncOperation);
    return _result;
}

//
// interface IECSEspaceApp wrapper method implementations
//

inline IECSContactInfoPtr IECSEspaceApp::GetSelfInfo ( ) {
    struct IECSContactInfo * _result = 0;
    HRESULT _hr = raw_GetSelfInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IECSContactInfoPtr(_result, false);
}

inline IECSContactMgrPtr IECSEspaceApp::GetContactMgr ( ) {
    struct IECSContactMgr * _result = 0;
    HRESULT _hr = raw_GetContactMgr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IECSContactMgrPtr(_result, false);
}

inline IECSMainWindowPtr IECSEspaceApp::GetMainWindow ( ) {
    struct IECSMainWindow * _result = 0;
    HRESULT _hr = raw_GetMainWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IECSMainWindowPtr(_result, false);
}

inline HRESULT IECSEspaceApp::RegisterEventListener ( enum ECSEventType eventId, GUID interfaceId, struct IECSEventCallback * handler ) {
    HRESULT _hr = raw_RegisterEventListener(eventId, interfaceId, handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSEspaceApp::UnregisterEventListener ( enum ECSEventType eventId, GUID interfaceId, struct IECSEventCallback * handler ) {
    HRESULT _hr = raw_UnregisterEventListener(eventId, interfaceId, handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSEspaceApp::OnContactStatusChanged ( int _state, _bstr_t _device, _bstr_t _contact ) {
    HRESULT _hr = raw_OnContactStatusChanged(_state, _device, _contact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSEspaceApp::OnLoginStatusChanged ( int State ) {
    HRESULT _hr = raw_OnLoginStatusChanged(State);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSEspaceApp::ShowLoginDialog ( ) {
    HRESULT _hr = raw_ShowLoginDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IECSOperatorResultPtr IECSEspaceApp::BackGroundLogin ( _bstr_t account, _bstr_t pwd ) {
    struct IECSOperatorResult * _result = 0;
    HRESULT _hr = raw_BackGroundLogin(account, pwd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IECSOperatorResultPtr(_result, false);
}

inline IECSOperatorResultPtr IECSEspaceApp::BackGroundTokenLogin ( _bstr_t account, _bstr_t token ) {
    struct IECSOperatorResult * _result = 0;
    HRESULT _hr = raw_BackGroundTokenLogin(account, token, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IECSOperatorResultPtr(_result, false);
}

inline HRESULT IECSEspaceApp::OnAppShutdown ( ) {
    HRESULT _hr = raw_OnAppShutdown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSEspaceApp::SetListenerHwnd ( struct IECSEventCallback * handler, long handlerHwnd ) {
    HRESULT _hr = raw_SetListenerHwnd(handler, handlerHwnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPresenceCapability wrapper method implementations
//

inline ContactCapabilities IPresenceCapability::Gettype ( ) {
    ContactCapabilities _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPresenceCapability::GetCanRender ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanRender(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPresenceCapability::GetCanCapture ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanCapture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPresenceCapability::GetAvailability ( ) {
    long _result = 0;
    HRESULT _hr = get_Availability(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface _IContactCallback wrapper method implementations
//

inline HRESULT _IContactCallback::OnChangeSetting ( struct IContact * _source, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1c2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _source, _asyncOperation);
    return _result;
}

inline HRESULT _IContactCallback::OnMoveToGroup ( struct IContact * _source, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1c3, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _source, _asyncOperation);
    return _result;
}

inline HRESULT _IContactCallback::OnGetOrganizationInformation ( struct IContact * _source, struct IContactCollection * _managers, struct IContactCollection * _peers, struct IContactCollection * _directors, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1c4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009\x0009\x0009\x0009", _source, _managers, _peers, _directors, _asyncOperation);
    return _result;
}

//
// dispinterface _ISelfCallback wrapper method implementations
//

inline HRESULT _ISelfCallback::OnSetPhones ( struct ISelf * _source, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x6d7, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _source, _asyncOperation);
    return _result;
}

inline HRESULT _ISelfCallback::OnSetPhone ( struct ISelf * _source, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x6d8, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _source, _asyncOperation);
    return _result;
}

inline HRESULT _ISelfCallback::OnRemovePhone ( struct ISelf * _source, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x6d9, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _source, _asyncOperation);
    return _result;
}

inline HRESULT _ISelfCallback::OnPublishContactInformation ( struct ISelf * _source, struct IAsynchronousOperation * _asyncOperation ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x6da, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", _source, _asyncOperation);
    return _result;
}

//
// dispinterface _IConversationWindowEvents wrapper method implementations
//

inline HRESULT _IConversationWindowEvents::OnNeedsSizeChange ( struct IConversationWindow * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa0, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IConversationWindowEvents::OnNeedsAttention ( struct IConversationWindow * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

//
// dispinterface _IModalityEvents wrapper method implementations
//

inline HRESULT _IModalityEvents::OnModalityStateChanged ( struct IModality * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x4b1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

inline HRESULT _IModalityEvents::OnActionAvailabilityChanged ( struct IModality * _eventSource, IUnknown * _eventData ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x4b4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000d", _eventSource, _eventData);
    return _result;
}

//
// interface IInstantMessagingClient wrapper method implementations
//

inline int IInstantMessagingClient::Gettype ( ) {
    int _result = 0;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ClientState IInstantMessagingClient::GetState ( ) {
    ClientState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IInstantMessagingClient::GetUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Uri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline ISelfPtr IInstantMessagingClient::GetSelf ( ) {
    struct ISelf * _result = 0;
    HRESULT _hr = get_Self(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISelfPtr(_result, false);
}

inline IContactManagerPtr IInstantMessagingClient::GetContactManager ( ) {
    struct IContactManager * _result = 0;
    HRESULT _hr = get_ContactManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactManagerPtr(_result, false);
}

inline IConversationManagerPtr IInstantMessagingClient::GetConversationManager ( ) {
    struct IConversationManager * _result = 0;
    HRESULT _hr = get_ConversationManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationManagerPtr(_result, false);
}

inline IUnknownPtr IInstantMessagingClient::GetConferenceScheduler ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ConferenceScheduler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IInstantMessagingClient::Signin ( _bstr_t userUri, _bstr_t domainAndUsername, _bstr_t password, IUnknown * ClientCallBack, const _variant_t & State, IUnknown * * asyncOperation ) {
    HRESULT _hr = raw_Signin(userUri, domainAndUsername, password, ClientCallBack, State, asyncOperation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IInstantMessagingClient::Signout ( IUnknown * _CommunicatorClientCallback, const _variant_t & _state ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_Signout(_CommunicatorClientCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline ISignInConfigurationPtr IInstantMessagingClient::GetSignInConfiguration ( ) {
    struct ISignInConfiguration * _result = 0;
    HRESULT _hr = get_SignInConfiguration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISignInConfigurationPtr(_result, false);
}

inline LyncClientCapabilityTypes IInstantMessagingClient::GetCapabilities ( ) {
    LyncClientCapabilityTypes _result;
    HRESULT _hr = get_Capabilities(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT * IInstantMessagingClient::CreateApplicationRegistration ( _bstr_t _appGuid, _bstr_t _appName ) {
    VARIANT * _result;
    HRESULT _hr = raw_CreateApplicationRegistration(_appGuid, _appName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IInstantMessagingClient::GetInSuppressedMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InSuppressedMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IAsynchronousOperationPtr IInstantMessagingClient::Initialize ( _bstr_t _clientName, _bstr_t _version, _bstr_t _clientShortName, _bstr_t _clientNameAbbreviation, _bstr_t _clientLongName, SupportedFeatures _supportedFeatures, IUnknown * _CommunicatorClientCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_Initialize(_clientName, _version, _clientShortName, _clientNameAbbreviation, _clientLongName, _supportedFeatures, _CommunicatorClientCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IInstantMessagingClient::Shutdown ( IUnknown * _CommunicatorClientCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_Shutdown(_CommunicatorClientCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

//
// interface ISelf wrapper method implementations
//

inline IAsynchronousOperationPtr ISelf::PublishContactInformation ( SAFEARRAY * _publishablePresenceItemTypes, SAFEARRAY * _publishablePresenceItemValues, IUnknown * _selfCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_PublishContactInformation(_publishablePresenceItemTypes, _publishablePresenceItemValues, _selfCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IContactPtr ISelf::GetContact ( ) {
    struct IContact * _result = 0;
    HRESULT _hr = get_Contact(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactPtr(_result, false);
}

inline IUnknownPtr ISelf::CreatePhone ( ContactEndpointType _phoneType, _bstr_t _phoneUri, VARIANT_BOOL _toBePublished ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CreatePhone(_phoneType, _phoneUri, _toBePublished, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline VARIANT_BOOL ISelf::CanSetPhone ( ContactEndpointType _phoneType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanSetPhone(_phoneType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * ISelf::GetPhones ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Phones(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IAsynchronousOperationPtr ISelf::SetPhones ( SAFEARRAY * _phones, IUnknown * _selfCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_SetPhones(_phones, _selfCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline SAFEARRAY * ISelf::GetPublishableCustomAvailabilityStates ( long _localeId ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetPublishableCustomAvailabilityStates(_localeId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * ISelf::GetPermissions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Permissions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISelf::GetPhotoDisplayed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PhotoDisplayed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IContactEndpointPtr ISelf::GetTestCallEndpoint ( ) {
    struct IContactEndpoint * _result = 0;
    HRESULT _hr = get_TestCallEndpoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactEndpointPtr(_result, false);
}

inline IAsynchronousOperationPtr ISelf::SetPhone ( ContactEndpointType _phoneType, _bstr_t _phoneUri, VARIANT_BOOL _toBePublished, IUnknown * _selfCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_SetPhone(_phoneType, _phoneUri, _toBePublished, _selfCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr ISelf::RemovePhone ( ContactEndpointType _phoneType, IUnknown * _selfCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_RemovePhone(_phoneType, _selfCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IUnknownPtr ISelf::GetPhone ( ContactEndpointType _phoneType ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetPhone(_phoneType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline VARIANT_BOOL ISelf::GetIsInResiliencyMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsInResiliencyMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IContact wrapper method implementations
//

inline _bstr_t IContact::GetUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Uri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IContact::GetContactInformation ( ContactInformationType _contactInformationType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetContactInformation(_contactInformationType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IContactInformationDictionaryPtr IContact::BatchGetContactInformation ( SAFEARRAY * _contactInformationTypes ) {
    struct IContactInformationDictionary * _result = 0;
    HRESULT _hr = raw_BatchGetContactInformation(_contactInformationTypes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactInformationDictionaryPtr(_result, false);
}

inline IContactSettingDictionaryPtr IContact::GetSettings ( ) {
    struct IContactSettingDictionary * _result = 0;
    HRESULT _hr = get_Settings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactSettingDictionaryPtr(_result, false);
}

inline VARIANT_BOOL IContact::CanStart ( ModalityTypes _modalityTypes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanStart(_modalityTypes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IAsynchronousOperationPtr IContact::ChangeSetting ( ContactSetting _contactSettingType, const _variant_t & _contactSettingValue, IUnknown * _contactCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_ChangeSetting(_contactSettingType, _contactSettingValue, _contactCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline VARIANT_BOOL IContact::CanChangeSetting ( ContactSetting _contactSetting ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanChangeSetting(_contactSetting, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IContactManagerPtr IContact::GetContactManager ( ) {
    struct IContactManager * _result = 0;
    HRESULT _hr = get_ContactManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactManagerPtr(_result, false);
}

inline IGroupCollectionPtr IContact::GetCustomGroups ( ) {
    struct IGroupCollection * _result = 0;
    HRESULT _hr = get_CustomGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupCollectionPtr(_result, false);
}

inline HRESULT IContact::MoveToGroup ( struct IGroup * _targetGroup, struct IGroup * _sourceGroup, IUnknown * _contactCallback, const _variant_t & _state, struct IAsynchronousOperation * * _asyncOperation ) {
    HRESULT _hr = raw_MoveToGroup(_targetGroup, _sourceGroup, _contactCallback, _state, _asyncOperation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IContact::CanMoveToGroup ( struct IGroup * _targetGroup, struct IGroup * _sourceGroup ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanMoveToGroup(_targetGroup, _sourceGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IContactEndpointPtr IContact::CreateContactEndpoint ( _bstr_t _telephoneUri ) {
    struct IContactEndpoint * _result = 0;
    HRESULT _hr = raw_CreateContactEndpoint(_telephoneUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactEndpointPtr(_result, false);
}

inline UnifiedCommunicationType IContact::GetUnifiedCommunicationType ( ) {
    UnifiedCommunicationType _result;
    HRESULT _hr = get_UnifiedCommunicationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IAsynchronousOperationPtr IContact::GetOrganizationInformation ( OrganizationStructureTypes _orgInfoTypes, IUnknown * _contactCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_GetOrganizationInformation(_orgInfoTypes, _contactCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IContactInformationDictionaryPtr IContact::GetMultipleContactInformation ( SAFEARRAY * _contactInformationTypes ) {
    struct IContactInformationDictionary * _result = 0;
    HRESULT _hr = raw_GetMultipleContactInformation(_contactInformationTypes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactInformationDictionaryPtr(_result, false);
}

//
// interface IContactCollection wrapper method implementations
//

inline IUnknownPtr IContactCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IContactCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IContactCollection::TryGetContact ( _bstr_t _uri, struct IContact * * _value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TryGetContact(_uri, _value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IContactSubscription wrapper method implementations
//

inline HRESULT IContactSubscription::Subscribe ( ContactSubscriptionRefreshRate _subscriptionFreshness, SAFEARRAY * _contactInformationTypes ) {
    HRESULT _hr = raw_Subscribe(_subscriptionFreshness, _contactInformationTypes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContactSubscription::Unsubscribe ( ) {
    HRESULT _hr = raw_Unsubscribe();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContactSubscription::AddContact ( struct IContact * _contact ) {
    HRESULT _hr = raw_AddContact(_contact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContactSubscription::RemoveContact ( struct IContact * _contact ) {
    HRESULT _hr = raw_RemoveContact(_contact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ContactSubscriptionRefreshRate IContactSubscription::GetLastSubscribedRefreshRate ( ) {
    ContactSubscriptionRefreshRate _result;
    HRESULT _hr = get_LastSubscribedRefreshRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IContactSubscription::GetLastSubscribedContactInformation ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_LastSubscribedContactInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IContactSubscription::GetContacts ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Contacts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IContactSubscription::AddContactByUri ( _bstr_t _contactUri ) {
    HRESULT _hr = raw_AddContactByUri(_contactUri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContactSubscription::AddContacts ( SAFEARRAY * _contacts ) {
    HRESULT _hr = raw_AddContacts(_contacts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IContactManager wrapper method implementations
//

inline IGroupCollectionPtr IContactManager::GetGroups ( ) {
    struct IGroupCollection * _result = 0;
    HRESULT _hr = get_Groups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupCollectionPtr(_result, false);
}

inline IContactPtr IContactManager::GetContactByUri ( _bstr_t _contactUri ) {
    struct IContact * _result = 0;
    HRESULT _hr = raw_GetContactByUri(_contactUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactPtr(_result, false);
}

inline IAsynchronousOperationPtr IContactManager::Lookup ( _bstr_t _lookupString, IUnknown * _contactsAndGroupsCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_Lookup(_lookupString, _contactsAndGroupsCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IContactSubscriptionPtr IContactManager::CreateSubscription ( ) {
    struct IContactSubscription * _result = 0;
    HRESULT _hr = raw_CreateSubscription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactSubscriptionPtr(_result, false);
}

inline IAsynchronousOperationPtr IContactManager::Search ( _bstr_t _searchString, SearchProviders _providers, UCSearchFields _searchFields, UCSearchOptions _searchOptions, unsigned long _maxResults, IUnknown * _contactsAndGroupsCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_Search(_searchString, _providers, _searchFields, _searchOptions, _maxResults, _contactsAndGroupsCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IContactManager::RemoveContactFromAllGroups ( struct IContact * _contact, IUnknown * _contactsAndGroupsCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_RemoveContactFromAllGroups(_contact, _contactsAndGroupsCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline _bstr_t IContactManager::GetSearchProviderID ( SearchProviders _provider ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSearchProviderID(_provider, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IAsynchronousOperationPtr IContactManager::AddCustomGroup ( _bstr_t _customGroupName, IUnknown * _contactsAndGroupsCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_AddCustomGroup(_customGroupName, _contactsAndGroupsCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IContactManager::AddDistributionGroup ( IUnknown * _distributionGroup, IUnknown * _contactsAndGroupsCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_AddDistributionGroup(_distributionGroup, _contactsAndGroupsCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IContactManager::RemoveGroup ( IUnknown * _group, IUnknown * _contactsAndGroupsCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_RemoveGroup(_group, _contactsAndGroupsCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline HRESULT IContactManager::SuspendSubscriptions ( ) {
    HRESULT _hr = raw_SuspendSubscriptions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContactManager::ResumeSubscriptions ( ) {
    HRESULT _hr = raw_ResumeSubscriptions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline UCSearchFields IContactManager::GetSearchFields ( ) {
    UCSearchFields _result;
    HRESULT _hr = raw_GetSearchFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SearchProviderStatusType IContactManager::GetSearchProviderStatus ( SearchProviders _provider ) {
    SearchProviderStatusType _result;
    HRESULT _hr = raw_GetSearchProviderStatus(_provider, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IContactManager::GetExpertSearchQueryString ( _bstr_t _searchString ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetExpertSearchQueryString(_searchString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IContactPtr IContactManager::GetSelfContact ( ) {
    struct IContact * _result = 0;
    HRESULT _hr = raw_GetSelfContact(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactPtr(_result, false);
}

inline IContactPtr IContactManager::GetContactByTel ( _bstr_t _telUri ) {
    struct IContact * _result = 0;
    HRESULT _hr = raw_GetContactByTel(_telUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactPtr(_result, false);
}

//
// interface IGroup wrapper method implementations
//

inline UCGroupType IGroup::Gettype ( ) {
    UCGroupType _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGroup::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IGroup::AddContact ( struct IContact * _contact, IUnknown * _groupCallback, const _variant_t & _state, struct IAsynchronousOperation * * _asyncOperation ) {
    HRESULT _hr = raw_AddContact(_contact, _groupCallback, _state, _asyncOperation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGroup::RemoveContact ( struct IContact * pContact, IUnknown * _groupCallback, const _variant_t & _state, struct IAsynchronousOperation * * _asyncOperation ) {
    HRESULT _hr = raw_RemoveContact(pContact, _groupCallback, _state, _asyncOperation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IContactManagerPtr IGroup::GetContactManager ( ) {
    struct IContactManager * _result = 0;
    HRESULT _hr = get_ContactManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactManagerPtr(_result, false);
}

inline VARIANT_BOOL IGroup::CanInvoke ( GroupAction _action, struct IContact * _contact ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanInvoke(_action, _contact, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGroupCollection wrapper method implementations
//

inline IUnknownPtr IGroupCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IGroupCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IGroupPtr IGroupCollection::GetItem ( long _index ) {
    struct IGroup * _result = 0;
    HRESULT _hr = get_Item(_index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupPtr(_result, false);
}

inline VARIANT_BOOL IGroupCollection::TryGetGroup ( _bstr_t _groupName, struct IGroup * * _value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TryGetGroup(_groupName, _value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IGroupCollectionPtr IGroupCollection::GetGroupsByType ( UCGroupType _groupType ) {
    struct IGroupCollection * _result = 0;
    HRESULT _hr = raw_GetGroupsByType(_groupType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupCollectionPtr(_result, false);
}

inline long IGroupCollection::IndexOf ( struct IGroup * _group ) {
    long _result = 0;
    HRESULT _hr = raw_IndexOf(_group, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IConversationManager wrapper method implementations
//

inline ConversationSummarizerStates IConversationManager::GetSummarizerStates ( ) {
    ConversationSummarizerStates _result;
    HRESULT _hr = get_SummarizerStates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IConversationCollectionPtr IConversationManager::GetConversations ( ) {
    struct IConversationCollection * _result = 0;
    HRESULT _hr = get_Conversations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationCollectionPtr(_result, false);
}

inline IConversationPtr IConversationManager::AddConversation ( ) {
    struct IConversation * _result = 0;
    HRESULT _hr = raw_AddConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationPtr(_result, false);
}

inline IConversationPtr IConversationManager::JoinConference ( _bstr_t _conferenceUrl ) {
    struct IConversation * _result = 0;
    HRESULT _hr = raw_JoinConference(_conferenceUrl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationPtr(_result, false);
}

//
// interface IConversationCollection wrapper method implementations
//

inline long IConversationCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IConversationPtr IConversationCollection::GetItem ( long _index ) {
    struct IConversation * _result = 0;
    HRESULT _hr = get_Item(_index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationPtr(_result, false);
}

inline IUnknownPtr IConversationCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IConversationCollection::IndexOf ( struct IConversation * _conversation ) {
    long _result = 0;
    HRESULT _hr = raw_IndexOf(_conversation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IConversation wrapper method implementations
//

inline UCConversationState IConversation::GetState ( ) {
    UCConversationState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IParticipantPtr IConversation::GetSelfParticipant ( ) {
    struct IParticipant * _result = 0;
    HRESULT _hr = get_SelfParticipant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParticipantPtr(_result, false);
}

inline IUnknownPtr IConversation::GetModalities ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Modalities(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IParticipantCollectionPtr IConversation::GetParticipants ( ) {
    struct IParticipantCollection * _result = 0;
    HRESULT _hr = get_Participants(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParticipantCollectionPtr(_result, false);
}

inline IParticipantPtr IConversation::AddParticipant ( IDispatch * _contactOrCollaborationEndpoint ) {
    struct IParticipant * _result = 0;
    HRESULT _hr = raw_AddParticipant(_contactOrCollaborationEndpoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParticipantPtr(_result, false);
}

inline HRESULT IConversation::RemoveParticipant ( struct IParticipant * _participant ) {
    HRESULT _hr = raw_RemoveParticipant(_participant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IConversation::GetContexts ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Contexts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IConversation::GetHistory ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_History(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IConversation::GetProperties ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IAsynchronousOperationPtr IConversation::SetProperty ( UCConversationProperty _propertyType, const _variant_t & _propertyValue, IUnknown * _conversationCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_SetProperty(_propertyType, _propertyValue, _conversationCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IConversation::SendInitialContext ( SAFEARRAY * _contextTypes, SAFEARRAY * _contextDatas, IUnknown * _conversationCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_SendInitialContext(_contextTypes, _contextDatas, _conversationCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IConversation::SendContextData ( _bstr_t _applicationId, _bstr_t _dataType, _bstr_t _data, IUnknown * _conversationCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_SendContextData(_applicationId, _dataType, _data, _conversationCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline _bstr_t IConversation::GetApplicationData ( _bstr_t _appGuid ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetApplicationData(_appGuid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IConversationManagerPtr IConversation::GetConversationManager ( ) {
    struct IConversationManager * _result = 0;
    HRESULT _hr = get_ConversationManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationManagerPtr(_result, false);
}

inline IAsynchronousOperationPtr IConversation::Merge ( struct IConversation * _conversation, ModalityTypes _modalityTypes, IUnknown * _conversationCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_Merge(_conversation, _modalityTypes, _conversationCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IConversation::AdmitParticipants ( SAFEARRAY * _participants, IUnknown * _conversationCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_AdmitParticipants(_participants, _conversationCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IConversation::DenyParticipants ( SAFEARRAY * _participants, IUnknown * _conversationCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_DenyParticipants(_participants, _conversationCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IConversation::Park ( IUnknown * _conversationCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_Park(_conversationCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline HRESULT IConversation::End ( ) {
    HRESULT _hr = raw_End();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IConversation::CanInvoke ( ConversationAction _action ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanInvoke(_action, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IConversation::CanSetProperty ( UCConversationProperty _convProperty ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanSetProperty(_convProperty, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ConversationDirection IConversation::GetDirection ( ) {
    ConversationDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IAsynchronousOperationPtr IConversation::MuteParticipants ( SAFEARRAY * _participants, IUnknown * _conversationCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_MuteParticipants(_participants, _conversationCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IConversation::UnmuteParticipants ( SAFEARRAY * _participants, IUnknown * _conversationCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_UnmuteParticipants(_participants, _conversationCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

//
// interface IParticipant wrapper method implementations
//

inline IUnknownPtr IParticipant::GetModalities ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Modalities(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline VARIANT_BOOL IParticipant::GetIsSelf ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSelf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IContactPtr IParticipant::GetContact ( ) {
    struct IContact * _result = 0;
    HRESULT _hr = get_Contact(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactPtr(_result, false);
}

inline IConversationPtr IParticipant::GetConversation ( ) {
    struct IConversation * _result = 0;
    HRESULT _hr = get_Conversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationPtr(_result, false);
}

inline IUnknownPtr IParticipant::GetProperties ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IAsynchronousOperationPtr IParticipant::SetProperty ( UCParticipantProperty _propertyType, const _variant_t & _propertyValue, IUnknown * _participantCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_SetProperty(_propertyType, _propertyValue, _participantCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IParticipant::SetMute ( VARIANT_BOOL _mute, IUnknown * _participantCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_SetMute(_mute, _participantCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline VARIANT_BOOL IParticipant::GetIsMuted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMuted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IParticipantCollection wrapper method implementations
//

inline long IParticipantCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IParticipantPtr IParticipantCollection::GetItem ( long _index ) {
    struct IParticipant * _result = 0;
    HRESULT _hr = get_Item(_index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParticipantPtr(_result, false);
}

inline IUnknownPtr IParticipantCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IParticipantCollection::IndexOf ( struct IParticipant * _participant ) {
    long _result = 0;
    HRESULT _hr = raw_IndexOf(_participant, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IConversationWindow wrapper method implementations
//

inline IConversationPtr IConversationWindow::GetConversation ( ) {
    struct IConversation * _result = 0;
    HRESULT _hr = get_Conversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationPtr(_result, false);
}

inline long IConversationWindow::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConversationWindow::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConversationWindow::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConversationWindow::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IConversationWindow::Move ( long _left, long _top ) {
    HRESULT _hr = raw_Move(_left, _top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConversationWindow::Resize ( long _width, long _height ) {
    HRESULT _hr = raw_Resize(_width, _height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConversationWindow::MoveAndResize ( long _left, long _top, long _width, long _height ) {
    HRESULT _hr = raw_MoveAndResize(_left, _top, _width, _height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConversationWindow::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConversationWindow::Dock ( LONG_PTR _parentHWND ) {
    HRESULT _hr = raw_Dock(_parentHWND);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConversationWindow::Undock ( ) {
    HRESULT _hr = raw_Undock();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IConversationWindow::GetIsDocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IConversationWindow::GetIsFullScreen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LONG_PTR IConversationWindow::GetHandle ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_Handle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline LONG_PTR IConversationWindow::GetParentWindow ( ) {
    LONG_PTR _result;
    HRESULT _hr = get_ParentWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IAsynchronousOperationPtr IConversationWindow::OpenExtensibilityWindow ( _bstr_t _applicationId, IUnknown * _callback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_OpenExtensibilityWindow(_applicationId, _callback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline HRESULT IConversationWindow::CloseExtensibilityWindow ( _bstr_t _applicationId ) {
    HRESULT _hr = raw_CloseExtensibilityWindow(_applicationId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConversationWindow::FlashExtensibilityWindow ( _bstr_t _applicationId, VARIANT_BOOL _flash ) {
    HRESULT _hr = raw_FlashExtensibilityWindow(_applicationId, _flash);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAutomation wrapper method implementations
//

inline HRESULT IAutomation::LaunchAddContactWizard ( _bstr_t _contactEmail ) {
    HRESULT _hr = raw_LaunchAddContactWizard(_contactEmail);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IConversationWindowPtr IAutomation::StartConversation ( AutomationModalities _conversationModes, SAFEARRAY * _participantUris, SAFEARRAY * _contextTypes, SAFEARRAY * _contextDatas ) {
    struct IConversationWindow * _result = 0;
    HRESULT _hr = raw_StartConversation(_conversationModes, _participantUris, _contextTypes, _contextDatas, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationWindowPtr(_result, false);
}

inline IConversationWindowPtr IAutomation::JoinConference ( _bstr_t _conferenceUrl ) {
    struct IConversationWindow * _result = 0;
    HRESULT _hr = raw_JoinConference(_conferenceUrl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationWindowPtr(_result, false);
}

inline IAsynchronousOperationPtr IAutomation::StartConversationEx ( AutomationModalities _conversationModes, SAFEARRAY * _participantUris, SAFEARRAY * _contextTypes, SAFEARRAY * _contextDatas, IUnknown * _callback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_StartConversationEx(_conversationModes, _participantUris, _contextTypes, _contextDatas, _callback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IConversationWindowPtr IAutomation::GetConversationWindow ( struct IConversation * _conversation ) {
    struct IConversationWindow * _result = 0;
    HRESULT _hr = raw_GetConversationWindow(_conversation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationWindowPtr(_result, false);
}

//
// interface IUCOfficeIntegrationHelper wrapper method implementations
//

inline IInstantMessagingClientPtr IUCOfficeIntegrationHelper::GetCommunicatorClient ( ) {
    struct IInstantMessagingClient * _result = 0;
    HRESULT _hr = raw_GetCommunicatorClient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IInstantMessagingClientPtr(_result, false);
}

inline IAutomationPtr IUCOfficeIntegrationHelper::GetUIAutomation ( ) {
    struct IAutomation * _result = 0;
    HRESULT _hr = raw_GetUIAutomation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAutomationPtr(_result, false);
}

inline IDispatchPtr IUCOfficeIntegrationHelper::GetInteropHelper ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetInteropHelper(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IUCOfficeIntegrationHelper::GetAuthenticationInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAuthenticationInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IUCOfficeIntegrationHelper::Cleanup ( ) {
    HRESULT _hr = raw_Cleanup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IUCOfficeIntegrationHelper::Notify ( OIHelperAction Action, HRESULT hrRes ) {
    HRESULT _hr = raw_Notify(Action, hrRes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IModality wrapper method implementations
//

inline ModalityTypes IModality::Gettype ( ) {
    ModalityTypes _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ModalityState IModality::GetState ( ) {
    ModalityState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IConversationPtr IModality::GetConversation ( ) {
    struct IConversation * _result = 0;
    HRESULT _hr = get_Conversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationPtr(_result, false);
}

inline IParticipantPtr IModality::GetParticipant ( ) {
    struct IParticipant * _result = 0;
    HRESULT _hr = get_Participant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParticipantPtr(_result, false);
}

inline IContactEndpointPtr IModality::GetEndpoint ( ) {
    struct IContactEndpoint * _result = 0;
    HRESULT _hr = get_Endpoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContactEndpointPtr(_result, false);
}

inline void IModality::PutEndpoint ( struct IContactEndpoint * _collaborationEndpoint ) {
    HRESULT _hr = put_Endpoint(_collaborationEndpoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUnknownPtr IModality::GetProperties ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IAsynchronousOperationPtr IModality::SetProperty ( ModalityProperty _propertyType, const _variant_t & _propertyValue, IUnknown * _modalityCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_SetProperty(_propertyType, _propertyValue, _modalityCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IModality::Connect ( ModalityConnectOptions _options, IUnknown * _modalityCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_Connect(_options, _modalityCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IModality::Disconnect ( ModalityDisconnectReason _reason, IUnknown * _modalityCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_Disconnect(_reason, _modalityCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline HRESULT IModality::Reject ( ModalityDisconnectReason _reason ) {
    HRESULT _hr = raw_Reject(_reason);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IModality::Accept ( ) {
    HRESULT _hr = raw_Accept();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IAsynchronousOperationPtr IModality::Hold ( IUnknown * _modalityCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_Hold(_modalityCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IModality::Retrieve ( IUnknown * _modalityCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_Retrieve(_modalityCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IModality::Forward ( IDispatch * _contactOrCollaborationEndpoint, IUnknown * _modalityCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_Forward(_contactOrCollaborationEndpoint, _modalityCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IModality::Transfer ( IDispatch * _contactOrCollaborationEndpoint, TransferOptions _options, IUnknown * _modalityCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_Transfer(_contactOrCollaborationEndpoint, _options, _modalityCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline IAsynchronousOperationPtr IModality::ConsultativeTransfer ( struct IConversation * _conversation, TransferOptions _options, IUnknown * _modalityCallback, const _variant_t & _state ) {
    struct IAsynchronousOperation * _result = 0;
    HRESULT _hr = raw_ConsultativeTransfer(_conversation, _options, _modalityCallback, _state, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAsynchronousOperationPtr(_result, false);
}

inline VARIANT_BOOL IModality::CanInvoke ( ModalityAction _action ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanInvoke(_action, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IModality::CanSetProperty ( ModalityProperty _modalityProperty ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanSetProperty(_modalityProperty, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IConversationContext wrapper method implementations
//

inline _bstr_t IConversationContext::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline ConversationContextType IConversationContext::Gettype ( ) {
    ConversationContextType _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IConversationContext::GetIsActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IConversationContext::GetIsRequired ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRequired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IConversationContext::PutIsRequired ( VARIANT_BOOL _isRequired ) {
    HRESULT _hr = put_IsRequired(_isRequired);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IParticipantInfoPtr IConversationContext::GetFrom ( ) {
    struct IParticipantInfo * _result = 0;
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParticipantInfoPtr(_result, false);
}

inline void IConversationContext::PutFrom ( struct IParticipantInfo * _from ) {
    HRESULT _hr = put_From(_from);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IParticipantInfoPtr IConversationContext::GetTo ( ) {
    struct IParticipantInfo * _result = 0;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParticipantInfoPtr(_result, false);
}

inline void IConversationContext::PutTo ( struct IParticipantInfo * _to ) {
    HRESULT _hr = put_To(_to);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IConversationContext::GetConversationId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IConversationContext::PutConversationId ( _bstr_t _conversationId ) {
    HRESULT _hr = put_ConversationId(_conversationId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IConversationContext::GetDate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IConversationContext::PutDate ( _bstr_t _date ) {
    HRESULT _hr = put_Date(_date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SAFEARRAY * IConversationContext::GetParticipants ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Participants(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IConversationContext::PutParticipants ( SAFEARRAY * _participants ) {
    HRESULT _hr = put_Participants(_participants);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ModalityTypes IConversationContext::GetModalityTypes ( ) {
    ModalityTypes _result;
    HRESULT _hr = get_ModalityTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IConversationContext::PutModalityTypes ( ModalityTypes _modalityTypes ) {
    HRESULT _hr = put_ModalityTypes(_modalityTypes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IConversationContext::GetDataFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IConversationContext::PutDataFormat ( _bstr_t _dataFormat ) {
    HRESULT _hr = put_DataFormat(_dataFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IConversationContext::GetData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IConversationContext::PutData ( _bstr_t _data ) {
    HRESULT _hr = put_Data(_data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IConversationContextCollectionPtr IConversationContext::GetSubContexts ( ) {
    struct IConversationContextCollection * _result = 0;
    HRESULT _hr = get_SubContexts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationContextCollectionPtr(_result, false);
}

inline IParticipantInfoPtr IConversationContext::CreateParticipantInfo ( _bstr_t _uri, _bstr_t _representedUri ) {
    struct IParticipantInfo * _result = 0;
    HRESULT _hr = raw_CreateParticipantInfo(_uri, _representedUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParticipantInfoPtr(_result, false);
}

//
// interface IConversationContextCollection wrapper method implementations
//

inline long IConversationContextCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IConversationContextPtr IConversationContextCollection::GetItem ( long _index ) {
    struct IConversationContext * _result = 0;
    HRESULT _hr = get_Item(_index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationContextPtr(_result, false);
}

inline IUnknownPtr IConversationContextCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IConversationContextList wrapper method implementations
//

inline HRESULT IConversationContextList::Add ( struct IConversationContext * _context ) {
    HRESULT _hr = raw_Add(_context);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConversationContextList::Remove ( struct IConversationContext * _context ) {
    HRESULT _hr = raw_Remove(_context);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IConversationContextPtr IConversationContextList::CreateContext ( _bstr_t _id, ConversationContextType _contextType, VARIANT_BOOL _doMakeActive ) {
    struct IConversationContext * _result = 0;
    HRESULT _hr = raw_CreateContext(_id, _contextType, _doMakeActive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversationContextPtr(_result, false);
}

inline HRESULT IConversationContextList::ModifyActiveContext ( _bstr_t _contextId, _bstr_t _contextData, ConversationContextUpdateOptions _contextUpdateOptions ) {
    HRESULT _hr = raw_ModifyActiveContext(_contextId, _contextData, _contextUpdateOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
